name: "Android Release Debug"

on:
  push:
    branches:
      - master
jobs:
  build-android-debug:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install specific NDK version (Trying NDK 26)
        run: sdkmanager "ndk;26.1.10909125"

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Install frontend dependencies
        run: npm ci

      - name: Extract app version
        id: app_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Decode Android keystore
        id: decode_keystore
        # Decode keystore to the root directory
        run: |
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 --decode > android-release.jks
          echo "Decoded keystore to $(pwd)/android-release.jks"
        shell: bash

      # *** NEW STEP ***
      - name: Create keystore.properties for Gradle
        run: |
          echo "Creating keystore.properties for Gradle build..."
          # Define the path to the keystore file relative to the Android project root (src-tauri/gen/android/)
          # It needs to point back up to the repository root where android-release.jks is.
          KEYSTORE_REL_PATH="../../android-release.jks"

          # Ensure the target directory exists (Tauri might create it, but being safe)
          mkdir -p src-tauri/gen/android

          # Create the keystore.properties file
          cat <<EOF > src-tauri/gen/android/keystore.properties
          # Properties read by build.gradle.kts
          storeFile=${KEYSTORE_REL_PATH}
          password=${{ secrets.ANDROID_RELEASE_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_RELEASE_KEY }}
          # keyPassword=${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }} # Gradle uses 'password' for both store and key
          EOF

          echo "keystore.properties created in src-tauri/gen/android/ with content:"
          cat src-tauri/gen/android/keystore.properties
        shell: bash
      # *** END NEW STEP ***

      - name: DEBUG - Check package.json script and run tauri info
        # (Keep this debug step for now)
        run: |
          echo "--- package.json scripts ---"
          node -p "require('./package.json').scripts" || echo "Could not read package.json scripts"
          echo "--- npx tauri info ---"
          npx tauri info
          echo "--- Running build command ---"

      - name: Build Android App (APK and AAB) - Using Gradle Signing Config
        # We removed the TAURI_ANDROID_* env vars as Gradle now reads the properties file
        # Keep verbosity (-vvv) and RUST_LOG=debug for now in case of other issues
        run: npm run tauri android build --release -vvv # Or use npx if preferred
        env:
          # NDK_HOME still needed for Rust build part
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/26.1.10909125
          CI: true
          RUST_LOG: debug
          # No TAURI_ANDROID_* variables needed here anymore

      - name: DEBUG - List build artifacts directory
        # Run this regardless of previous step outcome to see if anything was created
        if: always()
        run: |
          echo "--- Listing src-tauri/target/release (if exists) ---"
          ls -lR src-tauri/target/release || echo "src-tauri/target/release not found or empty"
          echo "--- Finding apk/aab files in src-tauri ---"
          find src-tauri -name "*.apk" -o -name "*.aab" || echo "No apk or aab files found in src-tauri"
          echo "--- Finding apk/aab files everywhere ---"
          find . -name "*.apk" -o -name "*.aab" || echo "No apk or aab files found anywhere"

      # --- Renaming and Release Steps ---
      # Removing continue-on-error for clearer debugging for now.
      # These steps will likely fail if the build step continues to fail silently.
      - name: Rename APK artifact
        run: |
          # Add ls before mv to see if the file exists just before trying to move it
          ls -l src-tauri/target/release/android-artifacts/app-universal-release-signed.apk
          mv src-tauri/target/release/android-artifacts/app-universal-release-signed.apk tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.apk

      - name: Rename AAB artifact
        run: |
          # Add ls before mv
          ls -l src-tauri/target/release/android-artifacts/app-universal-release.aab
          mv src-tauri/target/release/android-artifacts/app-universal-release.aab tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.aab

      - name: Create GitHub Release
        # Only run if build and rename likely succeeded
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.app_version.outputs.version }}
          name: Tsuuchinoko v${{ steps.app_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.apk
            tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.aab
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
