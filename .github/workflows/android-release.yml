name: "Android Release"

on:
  push:
    branches:
      - master

jobs:
  build-android-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: sdkmanager "ndk;26.1.10909125"

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Install dependencies
        run: npm ci

      - name: Extract app version
        id: app_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Setup keystore for signing
        run: |
          KEYSTORE_PATH="${GITHUB_WORKSPACE}/tsuuchinoko-keystore.jks"
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 --decode > ${KEYSTORE_PATH}
          chmod 600 ${KEYSTORE_PATH}
          
          mkdir -p src-tauri/gen/android
          cat <<EOF > src-tauri/gen/android/keystore.properties
          keyAlias=${{ secrets.ANDROID_RELEASE_KEY }}
          password=${{ secrets.ANDROID_RELEASE_PASSWORD }}
          storeFile=${KEYSTORE_PATH}
          EOF

      - name: Build Android App
        run: npm run tauri android build
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/26.1.10909125
          CI: true

      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          APK_FILE=$(find src-tauri -name "app-universal-release.apk" | head -1)
          AAB_FILE=$(find src-tauri -name "app-universal-release.aab" | head -1)
          
          if [ -n "$APK_FILE" ] && [ -n "$AAB_FILE" ]; then
            cp "$APK_FILE" release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.apk
            cp "$AAB_FILE" release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.aab
          else
            echo "APK or AAB files not found" && exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: android-v${{ steps.app_version.outputs.version }}
          name: Tsuuchinoko Android v${{ steps.app_version.outputs.version }}
          files: |
            release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.apk
            release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.aab
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}