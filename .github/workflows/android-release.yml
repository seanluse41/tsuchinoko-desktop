name: "Android Release"

on:
  push:
    branches:
      - master
jobs:
  build-android-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install specific NDK version
        run: sdkmanager "ndk;26.1.10909125"

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Install frontend dependencies
        run: npm ci

      - name: Extract app version
        id: app_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Decode Android keystore
        id: decode_keystore
        # Place the keystore in the workspace root for simplicity
        run: |
          # Create a keystore directly in the workspace
          KEYSTORE_PATH="${GITHUB_WORKSPACE}/tsuuchinoko-keystore.jks"
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 --decode > ${KEYSTORE_PATH}
          chmod 600 ${KEYSTORE_PATH}
          echo "keystore_path=${KEYSTORE_PATH}" >> $GITHUB_OUTPUT
          echo "Decoded keystore to ${KEYSTORE_PATH}"
        shell: bash

      - name: Create keystore.properties
        run: |
          # Ensure directory exists
          mkdir -p src-tauri/gen/android
          
          # Create the properties file with absolute path to the keystore
          echo "Creating keystore.properties..."
          cat <<EOF > src-tauri/gen/android/keystore.properties
          keyAlias=${{ secrets.ANDROID_RELEASE_KEY }}
          password=${{ secrets.ANDROID_RELEASE_PASSWORD }}
          storeFile=${{ steps.decode_keystore.outputs.keystore_path }}
          EOF
          
          # Double-check the file content (hiding sensitive values)
          echo "keystore.properties created at $(pwd)/src-tauri/gen/android/keystore.properties"
          echo "storeFile value is: ${{ steps.decode_keystore.outputs.keystore_path }}"
        shell: bash

      - name: Build Android App
        run: npm run tauri android build
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/26.1.10909125
          CI: true
          RUST_LOG: debug

      - name: Debug - List files and directories
        if: always()
        run: |
          echo "--- Verifying keystore file exists ---"
          ls -la ${{ steps.decode_keystore.outputs.keystore_path }} || echo "Keystore not found!"
          
          echo "--- Checking keystore.properties content (sanitized) ---"
          grep -v "password" src-tauri/gen/android/keystore.properties || echo "Properties file not found!"
          
          echo "--- Checking for built APK/AAB files ---"
          find src-tauri -name "*.apk" -o -name "*.aab"

      - name: Rename and collect APK artifact
        if: success()
        run: |
          mkdir -p release-artifacts
          # Use find to locate the APK file
          APK_FILE=$(find src-tauri -name "*-release-signed.apk" | head -1)
          if [ -n "$APK_FILE" ]; then
            cp "$APK_FILE" release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.apk
            echo "APK file found and copied to release artifacts"
          else
            echo "No APK file found" && exit 1
          fi

      - name: Rename and collect AAB artifact
        if: success()
        run: |
          # Use find to locate the AAB file
          AAB_FILE=$(find src-tauri -name "*-release.aab" | head -1)
          if [ -n "$AAB_FILE" ]; then
            cp "$AAB_FILE" release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.aab
            echo "AAB file found and copied to release artifacts"
          else
            echo "No AAB file found" && exit 1
          fi

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: android-v${{ steps.app_version.outputs.version }}
          name: Tsuuchinoko Android v${{ steps.app_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.apk
            release-artifacts/tsuuchinoko-v${{ steps.app_version.outputs.version }}-universal.aab
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}